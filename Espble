#Prerequisites
Install ESP-IDF (version 4.0 or later) on your machine.
An ESP32 development board.
A BLE-capable smartphone and the ESP BLE Provisioning mobile app (available on iOS and Android).#

#Create a new ESP-IDF project:#
idf.py create-project ble_provisioning_example
cd ble_provisioning_example

#Configure Wi-Fi Provisioning:#

#include <string.h>
#include "esp_log.h"
#include "esp_event.h"
#include "nvs_flash.h"
#include "esp_wifi.h"
#include "wifi_provisioning/manager.h"
#include "wifi_provisioning/scheme_ble.h"
#include "esp_system.h"
#include "esp_err.h"

static const char *TAG = "BLE_PROV";

/* Event handler for catching system events */
static void event_handler(void *arg, esp_event_base_t event_base, int32_t event_id, void *event_data)
{
    if (event_base == WIFI_PROV_EVENT && event_id == WIFI_PROV_START) {
        ESP_LOGI(TAG, "Provisioning started");
    } else if (event_base == WIFI_PROV_EVENT && event_id == WIFI_PROV_CRED_RECV) {
        wifi_sta_config_t *wifi_sta_cfg = (wifi_sta_config_t *)event_data;
        ESP_LOGI(TAG, "Received Wi-Fi credentials: SSID=%s, Password=%s", wifi_sta_cfg->ssid, wifi_sta_cfg->password);
    } else if (event_base == WIFI_PROV_EVENT && event_id == WIFI_PROV_END) {
        ESP_LOGI(TAG, "Provisioning finished");
        wifi_prov_mgr_stop_provisioning();
    }
}

void app_main()
{
    // Initialize NVS
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);

    // Initialize TCP/IP stack and Wi-Fi
    ESP_ERROR_CHECK(esp_netif_init());
    ESP_ERROR_CHECK(esp_event_loop_create_default());
    esp_netif_create_default_wifi_sta();
    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&cfg));

    // Initialize provisioning manager
    wifi_prov_mgr_config_t prov_config = {
        .scheme = wifi_prov_scheme_ble,
        .scheme_event_handler = WIFI_PROV_EVENT_HANDLER_NONE,
        .app_event_handler = {
            .event_cb = event_handler,
            .user_data = NULL
        }
    };
    ESP_ERROR_CHECK(wifi_prov_mgr_init(prov_config));

    // Check if device is already provisioned
    bool provisioned = false;
    ESP_ERROR_CHECK(wifi_prov_mgr_is_provisioned(&provisioned));

    if (!provisioned) {
        ESP_LOGI(TAG, "Starting provisioning");

        // Start provisioning
        wifi_prov_security_t security = WIFI_PROV_SECURITY_1;
        const char *pop = "abcd1234"; // Proof of Possession (POP)
        const char *service_name = "PROV_ESP32"; // BLE Service name

        ESP_ERROR_CHECK(wifi_prov_mgr_start_provisioning(security, pop, service_name, NULL));
    } else {
        ESP_LOGI(TAG, "Already provisioned, connecting to Wi-Fi");

        // Connect to Wi-Fi
        ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));
        ESP_ERROR_CHECK(esp_wifi_start());
        ESP_ERROR_CHECK(esp_wifi_connect());
    }
}

#Configure the Project in menuconfig#
idf.py menuconfig



#Build and Flash the Code#
idf.py build
idf.py -p <PORT> flash monitor





####Monitor the Output
You should see log messages on the ESP32 indicating the provisioning status:

Provisioning Started: BLE service has been started.
Received Wi-Fi credentials: Shows the received SSID and password.
Provisioning Finished: BLE provisioning service has been stopped.
Wi-Fi connected: Once credentials are saved, the device will attempt to connect to Wi-Fi automatically.###
